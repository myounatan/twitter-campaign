/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace CampaignManager {
  export type TweetRewardStatsStruct = {
    tokensPerLike: BigNumberish;
    tokensPerRetweet: BigNumberish;
  };

  export type TweetRewardStatsStructOutput = [
    tokensPerLike: bigint,
    tokensPerRetweet: bigint
  ] & { tokensPerLike: bigint; tokensPerRetweet: bigint };

  export type RewardTokenStruct = {
    rewardType: BigNumberish;
    tokenAddress: AddressLike;
  };

  export type RewardTokenStructOutput = [
    rewardType: bigint,
    tokenAddress: string
  ] & { rewardType: bigint; tokenAddress: string };

  export type TweetInfoStruct = { likes: BigNumberish; retweets: BigNumberish };

  export type TweetInfoStructOutput = [likes: bigint, retweets: bigint] & {
    likes: bigint;
    retweets: bigint;
  };
}

export interface CampaignManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "backendAdmin"
      | "campaignCount"
      | "campaigns"
      | "claimRewardNative"
      | "createCampaignNative"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CampaignCreated"
      | "CampaignRewarded"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "backendAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "campaignCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "campaigns",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewardNative",
    values: [BigNumberish, BigNumberish, CampaignManager.TweetInfoStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createCampaignNative",
    values: [string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "backendAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "campaignCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "campaigns", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimRewardNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCampaignNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace CampaignCreatedEvent {
  export type InputTuple = [
    campaignId: BigNumberish,
    owner: AddressLike,
    name: string,
    description: string,
    tweetString: string,
    tokensPerLike: BigNumberish,
    tokensPerRetweet: BigNumberish,
    rewardsLeft: BigNumberish
  ];
  export type OutputTuple = [
    campaignId: bigint,
    owner: string,
    name: string,
    description: string,
    tweetString: string,
    tokensPerLike: bigint,
    tokensPerRetweet: bigint,
    rewardsLeft: bigint
  ];
  export interface OutputObject {
    campaignId: bigint;
    owner: string;
    name: string;
    description: string;
    tweetString: string;
    tokensPerLike: bigint;
    tokensPerRetweet: bigint;
    rewardsLeft: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CampaignRewardedEvent {
  export type InputTuple = [
    campaignId: BigNumberish,
    wallet: AddressLike,
    tokensRewarded: BigNumberish,
    likesRewarded: BigNumberish,
    retweetsRewarded: BigNumberish
  ];
  export type OutputTuple = [
    campaignId: bigint,
    wallet: string,
    tokensRewarded: bigint,
    likesRewarded: bigint,
    retweetsRewarded: bigint
  ];
  export interface OutputObject {
    campaignId: bigint;
    wallet: string;
    tokensRewarded: bigint;
    likesRewarded: bigint;
    retweetsRewarded: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CampaignManager extends BaseContract {
  connect(runner?: ContractRunner | null): CampaignManager;
  waitForDeployment(): Promise<this>;

  interface: CampaignManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  backendAdmin: TypedContractMethod<[], [string], "view">;

  campaignCount: TypedContractMethod<[], [bigint], "view">;

  campaigns: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        string,
        string,
        CampaignManager.TweetRewardStatsStructOutput,
        bigint,
        bigint,
        CampaignManager.RewardTokenStructOutput
      ] & {
        owner: string;
        name: string;
        description: string;
        tweetString: string;
        tweetRewardStats: CampaignManager.TweetRewardStatsStructOutput;
        rewardsLeft: bigint;
        totalRewardsGiven: bigint;
        rewardToken: CampaignManager.RewardTokenStructOutput;
      }
    ],
    "view"
  >;

  claimRewardNative: TypedContractMethod<
    [
      _campaignId: BigNumberish,
      _tweetId: BigNumberish,
      _currentTweetInfo: CampaignManager.TweetInfoStruct
    ],
    [void],
    "nonpayable"
  >;

  createCampaignNative: TypedContractMethod<
    [
      _name: string,
      _description: string,
      _tweetString: string,
      _tokensPerLike: BigNumberish,
      _tokensPerRetweet: BigNumberish
    ],
    [void],
    "payable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "backendAdmin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "campaignCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "campaigns"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        string,
        string,
        CampaignManager.TweetRewardStatsStructOutput,
        bigint,
        bigint,
        CampaignManager.RewardTokenStructOutput
      ] & {
        owner: string;
        name: string;
        description: string;
        tweetString: string;
        tweetRewardStats: CampaignManager.TweetRewardStatsStructOutput;
        rewardsLeft: bigint;
        totalRewardsGiven: bigint;
        rewardToken: CampaignManager.RewardTokenStructOutput;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "claimRewardNative"
  ): TypedContractMethod<
    [
      _campaignId: BigNumberish,
      _tweetId: BigNumberish,
      _currentTweetInfo: CampaignManager.TweetInfoStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createCampaignNative"
  ): TypedContractMethod<
    [
      _name: string,
      _description: string,
      _tweetString: string,
      _tokensPerLike: BigNumberish,
      _tokensPerRetweet: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "CampaignCreated"
  ): TypedContractEvent<
    CampaignCreatedEvent.InputTuple,
    CampaignCreatedEvent.OutputTuple,
    CampaignCreatedEvent.OutputObject
  >;
  getEvent(
    key: "CampaignRewarded"
  ): TypedContractEvent<
    CampaignRewardedEvent.InputTuple,
    CampaignRewardedEvent.OutputTuple,
    CampaignRewardedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "CampaignCreated(uint256,address,string,string,string,uint256,uint256,uint256)": TypedContractEvent<
      CampaignCreatedEvent.InputTuple,
      CampaignCreatedEvent.OutputTuple,
      CampaignCreatedEvent.OutputObject
    >;
    CampaignCreated: TypedContractEvent<
      CampaignCreatedEvent.InputTuple,
      CampaignCreatedEvent.OutputTuple,
      CampaignCreatedEvent.OutputObject
    >;

    "CampaignRewarded(uint256,address,uint256,uint256,uint256)": TypedContractEvent<
      CampaignRewardedEvent.InputTuple,
      CampaignRewardedEvent.OutputTuple,
      CampaignRewardedEvent.OutputObject
    >;
    CampaignRewarded: TypedContractEvent<
      CampaignRewardedEvent.InputTuple,
      CampaignRewardedEvent.OutputTuple,
      CampaignRewardedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
